import { getCoreSystemPrompt, getCompressionPrompt } from './packages/core/dist/src/core/prompts.js';
import { SUMMARIZE_TOOL_OUTPUT_PROMPT } from './packages/core/dist/src/utils/summarizer.js';
import { EDIT_SYS_PROMPT } from './packages/core/dist/src/utils/llm-edit-fixer.js';
import { Config } from './packages/core/dist/src/config/config.js';
import fs from 'fs';
import path from 'path';

// Mock Config for controlled environment
class MockConfig extends Config {
    constructor(options = {}) {
        const targetDir = options.targetDir ?? '/home/jchardon/projects/gemini-cli-no-sec';
        super({
            targetDir: targetDir,
            sessionId: 'mock-session-id',
            model: 'gemini-pro',
            debugMode: false,
            cwd: process.cwd(),
            ...options,
            telemetry: { enabled: false, logPrompts: false },
        });
        this._isGitRepo = options.isGitRepo ?? false;
    }
    isGitRepo() { return this._isGitRepo; }
}

// Helper to format a string as a YAML block scalar
function toYamlBlock(value) {
    if (!value || value.trim() === '') return '';
    const trimmedValue = value.trim();
    const indentedValue = trimmedValue.split('\n').map(line => `  ${line}`).join('\n');
    return `|\n${indentedValue}`;
}

async function main() {
    const allPrompts = {};

    // --- 1. Core System Prompts ---
    const basePromptFull = getCoreSystemPrompt();
    const gitPromptFull = getCoreSystemPrompt(undefined, { isGitRepo: true });
    process.env.SANDBOX = 'true';
    const sandboxPromptFull = getCoreSystemPrompt();
    delete process.env.SANDBOX;

    // Isolate the specific sections to avoid repetition
    const gitSection = gitPromptFull.replace(basePromptFull, '').trim();
    const sandboxSection = sandboxPromptFull.replace(basePromptFull, '').trim();

    allPrompts['base_prompt'] = basePromptFull;
    if (gitSection) allPrompts['git_rules'] = gitSection;
    if (sandboxSection) allPrompts['sandbox_rules'] = sandboxSection;

    // --- 2. Other Standalone Prompts ---
    allPrompts['compression_prompt'] = getCompressionPrompt();
    allPrompts['summarize_tool_output_prompt'] = SUMMARIZE_TOOL_OUTPUT_PROMPT;
    allPrompts['llm_edit_fixer_prompt'] = EDIT_SYS_PROMPT;

    // --- 3. Generate YAML Output ---
    let yamlOutput = '# This file is auto-generated by generate_prompts.js\n# It contains the modular system prompts for the Gemini CLI.\n\n';
    for (const [key, value] of Object.entries(allPrompts)) {
        const yamlValue = toYamlBlock(value);
        if (yamlValue) {
            yamlOutput += `${key}: ${yamlValue}\n\n`;
        }
    }

    const outputDir = 'generated_prompts';
    if (!fs.existsSync(outputDir)) {
        fs.mkdirSync(outputDir);
    }
    const outputPath = path.join(process.cwd(), outputDir, 'prompts.yaml');
    fs.writeFileSync(outputPath, yamlOutput, 'utf8');
    console.log(`Successfully generated all prompts into: ${outputPath}`);
}

main().catch(console.error);
